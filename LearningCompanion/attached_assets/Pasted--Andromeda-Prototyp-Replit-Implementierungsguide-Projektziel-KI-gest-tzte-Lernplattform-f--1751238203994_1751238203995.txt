# Andromeda Prototyp - Replit Implementierungsguide

## 🎯 Projektziel
KI-gestützte Lernplattform für komplexe Zahlen mit Duolingo-ähnlichem Design, implementiert in Replit.

---

## 📁 Replit Projektstruktur

```
andromeda-prototype/
├── main.py                 # Flask App Entry Point
├── requirements.txt        # Python Dependencies
├── .replit                # Replit Configuration
├── templates/             # HTML Templates
│   ├── base.html         # Base Template mit Bootstrap
│   ├── index.html        # Hauptseite mit Lernpfad
│   ├── lesson.html       # Lektionsansicht
│   └── initial_test.html # Einstufungstest
├── static/               # Statische Dateien
│   ├── css/
│   │   └── andromeda.css # Custom Styling
│   ├── js/
│   │   ├── main.js       # Hauptlogik
│   │   ├── gamification.js # XP/Leben System
│   │   └── ai_tutor.js   # KI-Chat Integration
│   └── images/           # Icons und Grafiken
├── data/                 # JSON Lerninhalte
│   ├── lessons.json      # Aufgaben strukturiert
│   ├── theory.json       # Theorieknoten Inhalte
│   └── initial_test.json # Einstufungstest Fragen
└── utils/                # Helper Funktionen
    ├── __init__.py
    ├── ai_handler.py     # Gemini API Integration
    └── lesson_manager.py # Lernlogik
```

---

## 🔧 Schritt-für-Schritt Implementierung

### Phase 1: Replit Setup (30 Min)

#### 1.1 Neues Replit Projekt
1. **New Repl** → **Python** → Name: `andromeda-prototype`
2. Erste Ordnerstruktur erstellen

#### 1.2 Requirements.txt
```txt
Flask==2.3.3
google-generativeai==0.3.2
python-dotenv==1.0.0
requests==2.31.0
```

#### 1.3 .replit Konfiguration
```toml
modules = ["python-3.11"]

[nix]
channel = "stable-23_05"

[[ports]]
localPort = 5000
externalPort = 80

[deployment]
run = ["python", "main.py"]
deploymentTarget = "cloudrun"
```

#### 1.4 Replit Secrets Setup
- **Secrets Tab** → Add Secret:
  - Key: `GEMINI_API_KEY`
  - Value: `[Dein Google Gemini API Key]`

### Phase 2: Backend Grundgerüst (45 Min)

#### 2.1 main.py - Flask App
```python
from flask import Flask, render_template, request, jsonify
import os
from utils.ai_handler import AIHandler
from utils.lesson_manager import LessonManager

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'dev-key-change-in-production')

# Initialize handlers
ai_handler = AIHandler()
lesson_manager = LessonManager()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/initial-test')
def initial_test():
    questions = lesson_manager.get_initial_test()
    return render_template('initial_test.html', questions=questions)

@app.route('/lesson/<int:lesson_id>')
def lesson(lesson_id):
    lesson_data = lesson_manager.get_lesson(lesson_id)
    return render_template('lesson.html', lesson=lesson_data)

@app.route('/api/chat', methods=['POST'])
def chat_with_tutor():
    user_message = request.json.get('message')
    lesson_context = request.json.get('context', '')
    
    response = ai_handler.get_tutor_response(user_message, lesson_context)
    return jsonify({'response': response})

@app.route('/api/hint/<int:lesson_id>/<int:question_id>/<int:hint_level>')
def get_hint(lesson_id, question_id, hint_level):
    hint = lesson_manager.get_hint(lesson_id, question_id, hint_level)
    return jsonify({'hint': hint})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
```

#### 2.2 utils/ai_handler.py
```python
import google.generativeai as genai
import os

class AIHandler:
    def __init__(self):
        genai.configure(api_key=os.environ.get('GEMINI_API_KEY'))
        self.model = genai.GenerativeModel('gemini-pro')
        
    def get_tutor_response(self, user_message, context=""):
        prompt = f"""
Du bist ein geduldiger Mathematik-Tutor für Ingenieurstudenten.
Kontext der aktuellen Aufgabe: {context}

Studentenfrage: {user_message}

Antworte nach diesen Prinzipien:
1. Erkläre konzeptuell, nicht nur rechnerisch
2. Verwende Schritt-für-Schritt Erklärungen
3. Stelle Rückfragen zum Verständnis
4. Gib keine direkten Antworten, sondern leite an
5. Verwende einfache, klare Sprache

Antwort:"""
        
        try:
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            return f"Entschuldigung, ich kann momentan nicht antworten. Versuche es später erneut."
```

#### 2.3 utils/lesson_manager.py
```python
import json
import os

class LessonManager:
    def __init__(self):
        self.data_path = 'data'
        
    def load_json(self, filename):
        filepath = os.path.join(self.data_path, filename)
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            return {}
    
    def get_initial_test(self):
        return self.load_json('initial_test.json')
    
    def get_lesson(self, lesson_id):
        lessons = self.load_json('lessons.json')
        return lessons.get(str(lesson_id), {})
    
    def get_hint(self, lesson_id, question_id, hint_level):
        lesson = self.get_lesson(lesson_id)
        questions = lesson.get('questions', [])
        
        if question_id < len(questions):
            hints = questions[question_id].get('hints', [])
            if hint_level < len(hints):
                return hints[hint_level]
        
        return "Kein Hinweis verfügbar."
```

### Phase 3: Frontend Templates (60 Min)

#### 3.1 templates/base.html
```html
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Andromeda - Lernplattform{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="{{ url_for('static', filename='css/andromeda.css') }}" rel="stylesheet">
</head>
<body>
    <div class="container-fluid h-100">
        <div class="row h-100">
            <!-- Navigation Sidebar -->
            <div class="col-1 sidebar">
                <div class="nav-icon active" data-section="learn">
                    <i class="fas fa-graduation-cap"></i>
                    <small>Lernen</small>
                </div>
            </div>
            
            <!-- Main Content -->
            <div class="col-8 main-content">
                {% block content %}{% endblock %}
            </div>
            
            <!-- Gamification Sidebar -->
            <div class="col-3 gamification-sidebar">
                <div class="widget xp-widget">
                    <h5>Tagesziel</h5>
                    <div class="progress-container">
                        <div class="progress">
                            <div class="progress-bar" id="xp-progress" style="width: 0%"></div>
                        </div>
                        <span id="xp-text">0/20 XP</span>
                    </div>
                </div>
                
                <div class="widget lives-widget">
                    <h5>Leben</h5>
                    <div class="lives-container">
                        <i class="fas fa-heart life-heart active" data-life="1"></i>
                        <i class="fas fa-heart life-heart active" data-life="2"></i>
                        <i class="fas fa-heart life-heart active" data-life="3"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/gamification.js') }}"></script>
    {% block scripts %}{% endblock %}
</body>
</html>
```

#### 3.2 templates/index.html
```html
{% extends "base.html" %}

{% block content %}
<div class="learning-path-container">
    <h2 class="text-center mb-4">Komplexe Zahlen Lernpfad</h2>
    
    <div class="learning-path">
        <div class="path-node lesson-node active" data-lesson="1">
            <i class="fas fa-star"></i>
            <div class="node-content">
                <h6>Grundlagen</h6>
                <button class="btn btn-success btn-sm start-btn">START</button>
            </div>
        </div>
        
        <div class="path-connector"></div>
        
        <div class="path-node theory-node locked" data-theory="1">
            <i class="fas fa-book"></i>
            <div class="node-content">
                <h6>Theorie: Darstellung</h6>
            </div>
        </div>
        
        <div class="path-connector"></div>
        
        <div class="path-node lesson-node locked" data-lesson="2">
            <i class="fas fa-star"></i>
            <div class="node-content">
                <h6>Rechnen mit i</h6>
            </div>
        </div>
        
        <div class="path-connector"></div>
        
        <div class="path-node reward-node locked" data-reward="1">
            <i class="fas fa-gift"></i>
            <div class="node-content">
                <h6>Schatztruhe</h6>
            </div>
        </div>
    </div>
</div>

<!-- Initial Test Modal -->
<div class="modal fade" id="initialTestModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Einstufungstest</h5>
            </div>
            <div class="modal-body">
                <p>Beantworte diese Fragen, um deinen Startpunkt zu finden:</p>
                <div id="test-questions"></div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script src="{{ url_for('static', filename='js/main.js') }}"></script>
{% endblock %}
```

#### 3.3 templates/lesson.html
```html
{% extends "base.html" %}

{% block content %}
<div class="lesson-container">
    <div class="lesson-header">
        <h3>{{ lesson.title }}</h3>
        <div class="progress">
            <div class="progress-bar" id="lesson-progress" style="width: 0%"></div>
        </div>
        <small class="text-muted">Frage <span id="current-question">1</span> von <span id="total-questions">{{ lesson.questions|length }}</span></small>
    </div>
    
    <div class="question-container" id="question-container">
        <!-- Wird dynamisch gefüllt -->
    </div>
    
    <div class="lesson-controls">
        <button class="btn btn-outline-primary" id="hint-btn">
            <i class="fas fa-lightbulb"></i> Hinweis
        </button>
        <button class="btn btn-outline-info" id="tutor-btn">
            <i class="fas fa-robot"></i> KI-Tutor fragen
        </button>
        <button class="btn btn-primary" id="check-btn" disabled>
            Prüfen
        </button>
    </div>
</div>

<!-- KI Tutor Chat Modal -->
<div class="modal fade" id="tutorModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-robot"></i> KI-Tutor
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="chat-container" id="chat-container">
                    <div class="chat-message tutor-message">
                        <strong>Tutor:</strong> Hallo! Ich helfe dir gerne bei dieser Aufgabe. Was bereitet dir Schwierigkeiten?
                    </div>
                </div>
                <div class="chat-input-container">
                    <input type="text" class="form-control" id="chat-input" placeholder="Stelle deine Frage...">
                    <button class="btn btn-primary" id="send-chat">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    const lessonData = {{ lesson | tojsonfilter }};
</script>
<script src="{{ url_for('static', filename='js/ai_tutor.js') }}"></script>
<script src="{{ url_for('static', filename='js/lesson.js') }}"></script>
{% endblock %}
```

### Phase 4: Styling & JavaScript (45 Min)

#### 4.1 static/css/andromeda.css
```css
:root {
    --primary-color: #00d4aa;
    --secondary-color: #1cb0f6;
    --accent-color: #ffc800;
    --danger-color: #ff4b4b;
    --background-color: #f7f7f7;
    --card-background: #ffffff;
}

body {
    background-color: var(--background-color);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.sidebar {
    background-color: var(--card-background);
    border-right: 1px solid #e0e0e0;
    padding: 1rem 0;
}

.nav-icon {
    text-align: center;
    padding: 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
    border-radius: 8px;
    margin: 0.5rem;
}

.nav-icon.active {
    background-color: var(--primary-color);
    color: white;
}

.nav-icon i {
    font-size: 1.5rem;
    display: block;
    margin-bottom: 0.5rem;
}

.gamification-sidebar {
    background-color: var(--card-background);
    border-left: 1px solid #e0e0e0;
    padding: 1rem;
}

.widget {
    background-color: var(--card-background);
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    padding: 1rem;
    margin-bottom: 1rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.progress-container {
    position: relative;
}

.progress {
    height: 12px;
    border-radius: 6px;
    background-color: #e0e0e0;
}

.progress-bar {
    background-color: var(--primary-color);
    border-radius: 6px;
    transition: width 0.3s ease;
}

#xp-text {
    position: absolute;
    top: -25px;
    right: 0;
    font-size: 0.9rem;
    font-weight: bold;
    color: var(--primary-color);
}

.lives-container {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
}

.life-heart {
    font-size: 1.5rem;
    color: var(--danger-color);
    transition: all 0.3s ease;
}

.life-heart:not(.active) {
    color: #cccccc;
}

.learning-path-container {
    padding: 2rem;
    max-width: 600px;
    margin: 0 auto;
}

.learning-path {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
}

.path-node {
    background-color: var(--card-background);
    border: 3px solid #e0e0e0;
    border-radius: 50px;
    width: 120px;
    height: 120px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
}

.path-node.active {
    border-color: var(--primary-color);
    box-shadow: 0 0 20px rgba(0, 212, 170, 0.3);
}

.path-node.completed {
    background-color: var(--accent-color);
    border-color: var(--accent-color);
    color: white;
}

.path-node.locked {
    border-color: #cccccc;
    color: #cccccc;
    cursor: not-allowed;
}

.path-node i {
    font-size: 2rem;
    margin-bottom: 0.5rem;
}

.node-content h6 {
    margin: 0;
    font-size: 0.8rem;
    text-align: center;
}

.path-connector {
    width: 4px;
    height: 30px;
    background-color: #e0e0e0;
    border-radius: 2px;
}

.start-btn {
    margin-top: 0.25rem;
    font-size: 0.7rem;
    padding: 0.25rem 0.5rem;
}

.lesson-container {
    padding: 2rem;
    max-width: 800px;
    margin: 0 auto;
}

.lesson-header {
    text-align: center;
    margin-bottom: 2rem;
}

.question-container {
    background-color: var(--card-background);
    border-radius: 12px;
    padding: 2rem;
    margin-bottom: 2rem;
    min-height: 300px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.lesson-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.chat-container {
    max-height: 400px;
    overflow-y: auto;
    padding: 1rem;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    margin-bottom: 1rem;
    background-color: #f9f9f9;
}

.chat-message {
    margin-bottom: 1rem;
    padding: 0.75rem;
    border-radius: 8px;
}

.tutor-message {
    background-color: #e3f2fd;
    border-left: 4px solid var(--secondary-color);
}

.user-message {
    background-color: #f3e5f5;
    border-left: 4px solid var(--primary-color);
    margin-left: 2rem;
}

.chat-input-container {
    display: flex;
    gap: 0.5rem;
}

.question-title {
    font-size: 1.2rem;
    font-weight: bold;
    margin-bottom: 1rem;
}

.answer-options {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-top: 1.5rem;
}

.answer-option {
    padding: 1rem;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: center;
}

.answer-option:hover {
    border-color: var(--primary-color);
    background-color: rgba(0, 212, 170, 0.1);
}

.answer-option.selected {
    border-color: var(--primary-color);
    background-color: rgba(0, 212, 170, 0.2);
}

.answer-option.correct {
    border-color: #28a745;
    background-color: rgba(40, 167, 69, 0.2);
}

.answer-option.incorrect {
    border-color: var(--danger-color);
    background-color: rgba(255, 75, 75, 0.2);
}

.feedback-container {
    margin-top: 1rem;
    padding: 1rem;
    border-radius: 8px;
    display: none;
}

.feedback-container.correct {
    background-color: rgba(40, 167, 69, 0.1);
    border: 1px solid #28a745;
    color: #155724;
}

.feedback-container.incorrect {
    background-color: rgba(255, 75, 75, 0.1);
    border: 1px solid var(--danger-color);
    color: #721c24;
}

@media (max-width: 768px) {
    .col-1, .col-3 {
        display: none;
    }
    
    .col-8 {
        flex: 0 0 100%;
        max-width: 100%;
    }
    
    .answer-options {
        grid-template-columns: 1fr;
    }
}
```

#### 4.2 static/js/gamification.js
```javascript
class GameSystem {
    constructor() {
        this.xp = 0;
        this.lives = 3;
        this.dailyGoal = 20;
        this.init();
    }
    
    init() {
        this.updateXPDisplay();
        this.updateLivesDisplay();
    }
    
    addXP(amount) {
        this.xp += amount;
        this.updateXPDisplay();
        this.showXPGain(amount);
    }
    
    loseLife() {
        if (this.lives > 0) {
            this.lives--;
            this.updateLivesDisplay();
            return true;
        }
        return false;
    }
    
    gainLife() {
        if (this.lives < 3) {
            this.lives++;
            this.updateLivesDisplay();
        }
    }
    
    updateXPDisplay() {
        const progressBar = document.getElementById('xp-progress');
        const xpText = document.getElementById('xp-text');
        
        if (progressBar && xpText) {
            const percentage = Math.min((this.xp / this.dailyGoal) * 100, 100);
            progressBar.style.width = percentage + '%';
            xpText.textContent = `${this.xp}/${this.dailyGoal} XP`;
        }
    }
    
    updateLivesDisplay() {
        const hearts = document.querySelectorAll('.life-heart');
        hearts.forEach((heart, index) => {
            if (index < this.lives) {
                heart.classList.add('active');
            } else {
                heart.classList.remove('active');
            }
        });
    }
    
    showXPGain(amount) {
        // Temporäre XP-Gain Animation
        const xpWidget = document.querySelector('.xp-widget');
        if (xpWidget) {
            const gainElement = document.createElement('div');
            gainElement.textContent = `+${amount} XP`;
            gainElement.className = 'xp-gain-animation';
            gainElement.style.cssText = `
                position: absolute;
                color: var(--primary-color);
                font-weight: bold;
                font-size: 1.2rem;
                z-index: 1000;
                animation: xpGainFloat 2s ease-out forwards;
                pointer-events: none;
            `;
            
            xpWidget.style.position = 'relative';
            xpWidget.appendChild(gainElement);
            
            setTimeout(() => gainElement.remove(), 2000);
        }
    }
    
    hasLives() {
        return this.lives > 0;
    }
    
    getStats() {
        return {
            xp: this.xp,
            lives: this.lives,
            dailyGoal: this.dailyGoal
        };
    }
}

// CSS für XP-Animation dynamisch hinzufügen
const style = document.createElement('style');
style.textContent = `
    @keyframes xpGainFloat {
        0% { transform: translateY(0); opacity: 1; }
        100% { transform: translateY(-30px); opacity: 0; }
    }
`;
document.head.appendChild(style);

// Globale Instanz erstellen
window.gameSystem = new GameSystem();
```

### Phase 5: Lerninhalte (30 Min)

#### 5.1 data/lessons.json
```json
{
    "1": {
        "id": 1,
        "title": "Grundlagen komplexer Zahlen",
        "description": "Einführung in die Welt der komplexen Zahlen",
        "questions": [
            {
                "id": 1,
                "type": "multiple_choice",
                "question": "Was ist die imaginäre Einheit i?",
                "question_detail": "Die imaginäre Einheit i ist die Grundlage aller komplexen Zahlen.",
                "options": [
                    "i = 1",
                    "i² = -1", 
                    "i = -1",
                    "i² = 1"
                ],
                "correct": 1,
                "explanation": "Die imaginäre Einheit i ist definiert durch i² = -1. Das bedeutet, i ist die Quadratwurzel von -1.",
                "hints": [
                    "Denke daran: Was passiert, wenn du i mit sich selbst multiplizierst?",
                    "Die imaginäre Einheit löst das Problem, dass es keine reelle Zahl gibt, deren Quadrat -1 ist.",
                    "i² = -1 ist die Definition der imaginären Einheit."
                ]
            },
            {
                "id": 2,
                "type": "multiple_choice", 
                "question": "Wie wird eine komplexe Zahl z = a + bi dargestellt?",
                "question_detail": "Eine komplexe Zahl besteht aus einem Realteil und einem Imaginärteil.",
                "options": [
                    "a ist der Imaginärteil, b ist der Realteil",
                    "a ist der Realteil, b ist der Imaginärteil",
                    "a und b sind beide imaginär",
                    "a und b sind beide reell"
                ],
                "correct": 1,
                "explanation": "In z = a + bi ist a der Realteil und b der Imaginärteil (Koeffizient von i).",
                "hints": [
                    "Schaue dir die Standardform a + bi genau an.",
                    "Der Term ohne i ist der Realteil.",
                    "Der Koeffizient vor i ist der Imaginärteil."
                ]
            }
        ]
    },
    "2": {
        "id": 2,
        "title": "Rechnen mit komplexen Zahlen",
        "description": "Addition, Subtraktion und Multiplikation",
        "questions": [
            {
                "id": 1,
                "type": "multiple_choice",
                "question": "Berechne (2 + 3i) + (1 + 4i)",
                "question_detail": "Addiere die beiden komplexen Zahlen komponentenweise.",
                "options": [
                    "3 + 7i",
                    "3 + 12i", 
                    "2 + 7i",
                    "6 + 4i"
                ],
                "correct": 0,
                "explanation": "Bei der Addition komplexer Zahlen addiert man Realteile und Imaginärteile getrennt: (2+1) + (3+4)i = 3 + 7i",
                "hints": [
                    "Addiere die Realteile: 2 + 1 = ?",
                    "Addiere die Imaginärteile: 3i + 4i = ?",
                    "Kombiniere beide Ergebnisse zur komplexen Zahl."
                ]
            }
        ]
    }
}
```

#### 5.2 data/initial_test.json
```json
{
    "title": "Einstufungstest - Komplexe Zahlen", 
    "description": "Diese Fragen helfen uns, deinen aktuellen Wissensstand zu ermitteln.",
    "questions": [
        {
            "id": 1,
            "question": "Was weißt du über komplexe Zahlen?",
            "options": [
                "Ich habe noch nie davon gehört",
                "Ich kenne den Begriff, aber nicht die Details", 
                "Ich weiß, dass sie aus Real- und Imaginärteil bestehen",
                "Ich kann damit rechnen und sie in der Gaußschen Ebene darstellen"
            ],
            "weight": [0, 1, 2, 3]
        },
        {
            "id": 2,
            "question": "Was ist i²?",
            "options": [
                "Weiß ich nicht",
                "i²= 1",
                "i² = -1", 
                "i² = i"
            ],
            "weight": [0, 0, 3, 1]
        },
        {
            "id": 3,
            "question": "Kannst du (2 + 3i) + (1 + 4i) berechnen?",
            "options": [
                "Nein, das kann ich nicht",
                "Ja, das Ergebnis ist 3 + 7i",
                "Ja, aber ich bin unsicher", 
                "Ja, und ich verstehe auch die Multiplikation"
            ],
            "weight": [0, 3, 2, 4]
        }
    ],
    "evaluation": {
        "0-3": {"start_lesson": 1, "message": "Perfekt! Wir fangen ganz von vorne an."},
        "4-6": {"start_lesson": 1, "message": "Du hast schon etwas Vorwissen - super!"},
        "7-9": {"start_lesson": 2, "message": "Du kennst die Grundlagen bereits. Lass uns mit dem Rechnen beginnen!"},
        "10+": {"start_lesson": 3, "message": "Wow! Du bist schon weit fortgeschritten."}
    }
}
```

#### 5.3 data/theory.json
```json
{
    "1": {
        "title": "Darstellung komplexer Zahlen",
        "content": [
            {
                "section": "Algebraische Form",
                "text": "Eine komplexe Zahl z wird in der Form z = a + bi geschrieben, wobei:",
                "formulas": [
                    "a ∈ ℝ ist der Realteil (Re(z) = a)",
                    "b ∈ ℝ ist der Imaginärteil (Im(z) = b)", 
                    "i ist die imaginäre Einheit mit i² = -1"
                ]
            },
            {
                "section": "Beispiele",
                "examples": [
                    "z₁ = 3 + 4i (Realteil: 3, Imaginärteil: 4)",
                    "z₂ = -2 + 7i (Realteil: -2, Imaginärteil: 7)",
                    "z₃ = 5 (rein reell, Imaginärteil: 0)",
                    "z₄ = 3i (rein imaginär, Realteil: 0)"
                ]
            }
        ]
    }
}
```

### Phase 6: JavaScript Logik vervollständigen (45 Min)

#### 6.1 static/js/main.js
```javascript
document.addEventListener('DOMContentLoaded', function() {
    const gameSystem = window.gameSystem;
    
    // Initial Test starten
    showInitialTest();
    
    // Event Listeners für Lernpfad-Knoten
    document.querySelectorAll('.path-node').forEach(node => {
        node.addEventListener('click', handleNodeClick);
    });
});

function showInitialTest() {
    fetch('/initial-test')
        .then(response => response.text())
        .then(html => {
            // Initial Test Modal zeigen
            const modal = new bootstrap.Modal(document.getElementById('initialTestModal'));
            loadTestQuestions();
            modal.show();
        });
}

function loadTestQuestions() {
    fetch('/api/initial-test-data')
        .then(response => response.json())
        .then(data => {
            const container = document.getElementById('test-questions');
            let currentQuestion = 0;
            let answers = [];
            
            function showQuestion(index) {
                const question = data.questions[index];
                container.innerHTML = `
                    <div class="question">
                        <h5>${question.question}</h5>
                        <div class="test-options">
                            ${question.options.map((option, i) => `
                                <label class="test-option">
                                    <input type="radio" name="test-q${index}" value="${i}">
                                    ${option}
                                </label>
                            `).join('')}
                        </div>
                        <button class="btn btn-primary mt-3" onclick="nextTestQuestion(${index})">
                            ${index < data.questions.length - 1 ? 'Weiter' : 'Test beenden'}
                        </button>
                    </div>
                `;
            }
            
            window.nextTestQuestion = function(index) {
                const selected = document.querySelector(`input[name="test-q${index}"]:checked`);
                if (selected) {
                    answers.push(parseInt(selected.value));
                    if (index < data.questions.length - 1) {
                        showQuestion(index + 1);
                    } else {
                        evaluateTest(answers, data);
                    }
                }
            };
            
            showQuestion(0);
        });
}

function evaluateTest(answers, testData) {
    let totalScore = 0;
    answers.forEach((answer, index) => {
        totalScore += testData.questions[index].weight[answer];
    });
    
    // Startpunkt basierend auf Score bestimmen
    let startLesson = 1;
    for (const [range, config] of Object.entries(testData.evaluation)) {
        if (range.includes('-')) {
            const [min, max] = range.split('-').map(Number);
            if (totalScore >= min && totalScore <= max) {
                startLesson = config.start_lesson;
                break;
            }
        } else if (range.includes('+')) {
            const min = parseInt(range);
            if (totalScore >= min) {
                startLesson = config.start_lesson;
                break;
            }
        }
    }
    
    // Lernpfad entsprechend aktivieren
    activatePath(startLesson);
    bootstrap.Modal.getInstance(document.getElementById('initialTestModal')).hide();
}

function activatePath(startLesson) {
    // Alle Knoten bis zum Startlektion aktivieren
    for (let i = 1; i <= startLesson; i++) {
        const node = document.querySelector(`[data-lesson="${i}"]`);
        if (node) {
            node.classList.remove('locked');
            if (i === startLesson) {
                node.classList.add('active');
            }
        }
    }
}

function handleNodeClick(event) {
    const node = event.currentTarget;
    
    if (node.classList.contains('locked')) {
        return;
    }
    
    if (node.hasAttribute('data-lesson')) {
        const lessonId = node.getAttribute('data-lesson');
        window.location.href = `/lesson/${lessonId}`;
    } else if (node.hasAttribute('data-theory')) {
        const theoryId = node.getAttribute('data-theory');
        showTheory(theoryId);
    } else if (node.hasAttribute('data-reward')) {
        const rewardId = node.getAttribute('data-reward');
        openReward(rewardId);
    }
}

function showTheory(theoryId) {
    fetch(`/api/theory/${theoryId}`)
        .then(response => response.json())
        .then(theory => {
            // Theory Modal erstellen und anzeigen
            const modalHtml = `
                <div class="modal fade" id="theoryModal" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">${theory.title}</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                ${theory.content.map(section => `
                                    <h6>${section.section}</h6>
                                    <p>${section.text}</p>
                                    ${section.formulas ? section.formulas.map(f => `<div class="formula">• ${f}</div>`).join('') : ''}
                                    ${section.examples ? section.examples.map(e => `<div class="example">• ${e}</div>`).join('') : ''}
                                `).join('')}
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHtml);
            const modal = new bootstrap.Modal(document.getElementById('theoryModal'));
            modal.show();
            
            // Modal nach Schließen entfernen
            document.getElementById('theoryModal').addEventListener('hidden.bs.modal', function() {
                this.remove();
            });
        });
}

function openReward(rewardId) {
    window.gameSystem.addXP(50);
    
    // Reward Animation
    const modalHtml = `
        <div class="modal fade" id="rewardModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content text-center">
                    <div class="modal-body">
                        <div class="reward-animation">
                            <i class="fas fa-gift" style="font-size: 4rem; color: var(--accent-color);"></i>
                            <h3>Glückwunsch!</h3>
                            <p>Du hast eine Schatztruhe geöffnet!</p>
                            <div class="xp-reward">+50 XP</div>
                        </div>
                        <button class="btn btn-primary" data-bs-dismiss="modal">Weiter lernen</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    const modal = new bootstrap.Modal(document.getElementById('rewardModal'));
    modal.show();
    
    // Knoten als completed markieren
    const rewardNode = document.querySelector(`[data-reward="${rewardId}"]`);
    if (rewardNode) {
        rewardNode.classList.add('completed');
    }
    
    document.getElementById('rewardModal').addEventListener('hidden.bs.modal', function() {
        this.remove();
    });
}
```

#### 6.2 static/js/ai_tutor.js
```javascript
class AITutor {
    constructor() {
        this.chatContainer = document.getElementById('chat-container');
        this.chatInput = document.getElementById('chat-input');
        this.sendButton = document.getElementById('send-chat');
        
        this.init();
    }
    
    init() {
        this.sendButton.addEventListener('click', () => this.sendMessage());
        this.chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.sendMessage();
            }
        });
    }
    
    async sendMessage() {
        const message = this.chatInput.value.trim();
        if (!message) return;
        
        // User message anzeigen
        this.addMessage(message, 'user');
        this.chatInput.value = '';
        
        // Loading indicator
        const loadingId = this.addMessage('Ich denke nach...', 'tutor', true);
        
        try {
            // Kontext der aktuellen Lektion mitschicken
            const context = this.getCurrentLessonContext();
            
            const response = await fetch('/api/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message,
                    context: context
                })
            });
            
            const data = await response.json();
            
            // Loading message entfernen und echte Antwort zeigen
            this.removeMessage(loadingId);
            this.addMessage(data.response, 'tutor');
            
        } catch (error) {
            this.removeMessage(loadingId);
            this.addMessage('Entschuldigung, ich kann momentan nicht antworten. Versuche es später erneut.', 'tutor');
        }
    }
    
    addMessage(text, sender, isLoading = false) {
        const messageId = 'msg-' + Date.now();
        const messageClass = sender === 'user' ? 'user-message' : 'tutor-message';
        
        const messageHtml = `
            <div class="chat-message ${messageClass}" id="${messageId}">
                <strong>${sender === 'user' ? 'Du' : 'Tutor'}:</strong> ${text}
            </div>
        `;
        
        this.chatContainer.insertAdjacentHTML('beforeend', messageHtml);
        this.chatContainer.scrollTop = this.chatContainer.scrollHeight;
        
        return messageId;
    }
    
    removeMessage(messageId) {
        const message = document.getElementById(messageId);
        if (message) {
            message.remove();
        }
    }
    
    getCurrentLessonContext() {
        // Context aus der aktuellen Lektion extrahieren
        const questionTitle = document.querySelector('.question-title');
        const lessonTitle = document.querySelector('.lesson-header h3');
        
        let context = '';
        if (lessonTitle) {
            context += `Lektion: ${lessonTitle.textContent}\n`;
        }
        if (questionTitle) {
            context += `Aktuelle Aufgabe: ${questionTitle.textContent}\n`;
        }
        
        return context;
    }
}

// Instanz erstellen wenn Modal geöffnet wird
document.getElementById('tutorModal').addEventListener('shown.bs.modal', function() {
    if (!window.aiTutor) {
        window.aiTutor = new AITutor();
    }
});
```

### Phase 7: Zusätzliche Backend-Routen (15 Min)

#### 7.1 Ergänzungen für main.py
```python
# Zusätzliche Routen zu main.py hinzufügen:

@app.route('/api/initial-test-data')
def get_initial_test_data():
    test_data = lesson_manager.get_initial_test()
    return jsonify(test_data)

@app.route('/api/theory/<int:theory_id>')
def get_theory(theory_id):
    theory_data = lesson_manager.get_theory(theory_id)
    return jsonify(theory_data)

@app.route('/api/submit-answer', methods=['POST'])
def submit_answer():
    lesson_id = request.json.get('lesson_id')
    question_id = request.json.get('question_id') 
    answer = request.json.get('answer')
    
    is_correct = lesson_manager.check_answer(lesson_id, question_id, answer)
    
    response_data = {
        'correct': is_correct,
        'explanation': lesson_manager.get_explanation(lesson_id, question_id)
    }
    
    return jsonify(response_data)
```

#### 7.2 Ergänzungen für lesson_manager.py
```python
# Zusätzliche Methoden zu LessonManager hinzufügen:

def get_theory(self, theory_id):
    theory_data = self.load_json('theory.json')
    return theory_data.get(str(theory_id), {})

def check_answer(self, lesson_id, question_id, user_answer):
    lesson = self.get_lesson(lesson_id)
    questions = lesson.get('questions', [])
    
    if question_id < len(questions):
        correct_answer = questions[question_id].get('correct')
        return user_answer == correct_answer
    
    return False

def get_explanation(self, lesson_id, question_id):
    lesson = self.get_lesson(lesson_id)
    questions = lesson.get('questions', [])
    
    if question_id < len(questions):
        return questions[question_id].get('explanation', '')
    
    return ''
```

---

## 🚀 Start-Checkliste für Replit

### Sofort nach Projekt-Erstellung:
- [ ] Ordnerstruktur erstellen
- [ ] requirements.txt mit Dependencies
- [ ] .replit Konfigurationsdatei
- [ ] Gemini API Key in Secrets eintragen

### Reihenfolge der Implementierung:
1. [ ] **Backend Grundgerüst** (main.py, utils/)
2. [ ] **Base Template** (base.html mit Bootstrap)
3. [ ] **Gamification System** (gamification.js)
4. [ ] **Lerninhalte** (JSON Dateien)
5. [ ] **Hauptseite** (index.html + main.js)
6. [ ] **Lektionsansicht** (lesson.html + lesson.js)
7. [ ] **KI-Integration** (ai_tutor.js)
8. [ ] **Styling verfeinern** (andromeda.css)

### Testing & Debug:
- [ ] Flask App startet ohne Fehler
- [ ] Bootstrap UI lädt korrekt
- [ ] Gamification System funktioniert
- [ ] Gemini API antwortet
- [ ] Responsive Design auf Handy testen

---

## 📱 User Stories für Tests

**Als Student möchte ich...**
- beim ersten Besuch einen kurzen Test machen, um meinen Startpunkt zu finden
- auf dem Lernpfad visuell sehen, wo ich stehe und was als nächstes kommt  
- bei schwierigen Aufgaben gestufte Hinweise bekommen
- den KI-Tutor fragen können, ohne dass er mir die Lösung direkt verrät
- für richtige Antworten XP sammeln und meinen Fortschritt sehen
- bei falschen Antworten Leben verlieren, aber eine faire Chance haben, sie zurückzugewinnen
- Theorieknoten öffnen können, um Formeln nachzuschlagen
- Belohnungen (Schatztruhen) freischalten für zusätzliche Motivation

Das Dokument ist jetzt vollständig und bietet einen detaillierten, replit-spezifischen Bauplan für den Andromeda-Prototyp!